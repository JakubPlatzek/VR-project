//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Runner dev controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Runnerdevcontrols: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Runnerdevcontrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Runner dev controls"",
    ""maps"": [
        {
            ""name"": ""Runner dev"",
            ""id"": ""302b81ad-5408-4e28-ad68-c816e27a4608"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4fb53be7-9462-4e6f-a7a4-683cf81c4876"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9ac97831-193a-447d-a990-837e04a08d02"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aaf9c710-143a-4c61-abb9-72ae0148785d"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3709962b-f56c-4723-a2ed-c0d149546f4b"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f7259b58-0abe-41bf-9d93-7a413af45ecb"",
                    ""path"": ""<Keyboard>/#(√Å)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fb89d3f9-9c88-4d47-aa54-f1f713ddd0fd"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // Runner dev
        m_Runnerdev = asset.FindActionMap("Runner dev", throwIfNotFound: true);
        m_Runnerdev_Move = m_Runnerdev.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Runner dev
    private readonly InputActionMap m_Runnerdev;
    private List<IRunnerdevActions> m_RunnerdevActionsCallbackInterfaces = new List<IRunnerdevActions>();
    private readonly InputAction m_Runnerdev_Move;
    public struct RunnerdevActions
    {
        private @Runnerdevcontrols m_Wrapper;
        public RunnerdevActions(@Runnerdevcontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Runnerdev_Move;
        public InputActionMap Get() { return m_Wrapper.m_Runnerdev; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunnerdevActions set) { return set.Get(); }
        public void AddCallbacks(IRunnerdevActions instance)
        {
            if (instance == null || m_Wrapper.m_RunnerdevActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunnerdevActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IRunnerdevActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IRunnerdevActions instance)
        {
            if (m_Wrapper.m_RunnerdevActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunnerdevActions instance)
        {
            foreach (var item in m_Wrapper.m_RunnerdevActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunnerdevActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunnerdevActions @Runnerdev => new RunnerdevActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IRunnerdevActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
